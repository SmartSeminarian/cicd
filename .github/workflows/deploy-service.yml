name: Deploy

on:
  repository_dispatch:
    types:
      - commit-to-branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVICE:     "${{ github.event.client_payload.repo }}"
      INSTANCE:    "${{ github.event.client_payload.repo }}_${{ github.event.client_payload.branch }}"

    steps:
      -
      - name: Checkout CI/CD
        uses: actions/checkout@v4

#      - name: Print Branch Information
#        run: |
#          echo "===== Initiated deploy ${{ github.event.client_payload.owner }} ===== "
#          echo " repo   : ${{ github.event.client_payload.repo }}"
#          echo " branch : ${{ github.event.client_payload.branch }} "
#          echo " sha    : ${{ github.event.client_payload.sha }}"
#          echo "====================================================================== "

      - name: Creating .env
        run: |
          echo "${{secrets.ENV_FILE}}" > ./.env
          echo "PROJECT=seminarian" >> ./.env
          echo "CONTAINER_NAME=$INSTANCE" >> ./.env
          echo "CONTAINER_DATA=${{vars.HOST_SERVICES_DATA}}/$INSTANCE" >> ./.env
          echo "SERVICE_NAME=$SERVICE" >> ./.env
#          echo "CF_TOKEN_stage=${{secrets.CF_TOKEN_stage}}" >> ./.env
#          echo "CF_TOKEN_prod=${{secrets.CF_TOKEN_prod}}" >> ./.env
          echo "BRANCH=${{ github.event.client_payload.branch }}" >> ./.env
          echo "VERSION_FILE=./VERSION" >> ./.env
          ls -la


#      - name: CF_TOKEN generation STAGE
#        if: env.branch == 'stage'
#        run: |
#            echo "CF_TOKEN=${{secrets.CF_TOKEN_STAGE}}" >> ./.env
#
#      - name: CF_TOKEN generation PROD
#        if: env.branch == 'prod'
#        run: |
#            echo "CF_TOKEN=${{secrets.CF_TOKEN_PROD}}" >> ./.env
#
#
#      - name: CF_TOKEN generation
#        run: |
#          if [ "$case_var" == "front-end" ]; then
#            echo "front-end detected"
#            if [ "$sub_case_var" == "stage" ]; then
#              echo "Stage instance detected"
#              echo "CF_TOKEN=${{secrets.CF_TOKEN_FRONT_STAGE}}" >> ./.env
#            elif [ "$sub_case_var" == "prod" ]; then
#              echo "Prod instance detected"
#              echo "CF_TOKEN=${{secrets.CF_TOKEN_FRONT}}" >> ./.env
#            else
#              echo "!!! Unknown instance !!!"
#            fi
#          elif [ "$case_var" == "back-end" ]; then
#            echo "back-end detected"
#            if [ "$sub_case_var" == "stage" ]; then
#              echo "Stage instance detected"
#              echo "CF_TOKEN=${{secrets.CF_TOKEN_API_STAGE}}" >> ./.env
#            elif [ "$sub_case_var" == "prod" ]; then
#              echo "Prod instance detected"
#              echo "CF_TOKEN=${{secrets.CF_TOKEN_API}}" >> ./.env
#            else
#              echo "!!! Unknown instance !!!"
#            fi
#          else
#            echo "No CF_TOKEN generated"
#          fi
#

      - name: Register ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
            Host remote
            HostName $SSH_HOST
            Port 22
            User $SSH_USER
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{vars.REMOTE_USER}}
          SSH_KEY: ${{secrets.TARGET_PRIVATE_KEY}}
          SSH_HOST: ${{secrets.TARGET_IP}}

      - name: testing hostname
        run: |
          cat ~/.ssh/config
          cat ~/.ssh/deploy.key
          ssh remote /usr/bin/hostname

      - name: Cleaning service directory
        run: |
          ssh remote mkdir -p   ${{vars.HOST_SERVICES_HOME}}/$INSTANCE/
          ssh remote rm    -rf  ${{vars.HOST_SERVICES_HOME}}/$INSTANCE/

      - name: version info
        run: |
            D=`date`
            echo "Deploy info: date=$D, repo= $INSTANCE -> ${{ github.event.client_payload.sha }}" > ./VERSION

      - name: Copy launch and config files
        run: |
          ssh remote mkdir -p ${{vars.HOST_SERVICES_HOME}}/$INSTANCE
          scp  ./deploy/$SERVICE/* remote:${{vars.HOST_SERVICES_HOME}}/$INSTANCE
          scp  ./.env remote:${{vars.HOST_SERVICES_HOME}}/$INSTANCE
          scp  ./VERSION remote:${{vars.HOST_SERVICES_HOME}}/$INSTANCE

      - name: Run docker-compose
        run: |
          ssh remote docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          ssh remote docker compose --project-directory ${{vars.HOST_SERVICES_HOME}}/$INSTANCE/ down
          ssh remote docker pull ${{secrets.DOCKER_USERNAME}}/$SERVICE:${{ github.event.client_payload.branch }}
          ssh remote docker compose --project-directory ${{vars.HOST_SERVICES_HOME}}/$INSTANCE/ up --detach --force-recreate --remove-orphans

